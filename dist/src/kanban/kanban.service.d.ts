import { Kanban } from './kanban.model';
import { FindOptions } from 'sequelize';
import { TaskService } from '../task/task.service';
import { SharedKanbanBoardService } from '../shared-kanban-board/shared-kanban-board.service';
export declare class KanbanService {
    private kanbanModel;
    private taskService;
    private sharedKanbanService;
    constructor(kanbanModel: typeof Kanban, taskService: TaskService, sharedKanbanService: SharedKanbanBoardService);
    create(userId: number, transaction: any): Promise<Kanban>;
    findAll(userId: number, transaction: any): Promise<{
        data: {
            [x: number]: Kanban;
            length: number;
            toString(): string;
            toLocaleString(): string;
            pop(): Kanban;
            push(...items: Kanban[]): number;
            concat(...items: ConcatArray<Kanban>[]): Kanban[];
            concat(...items: (Kanban | ConcatArray<Kanban>)[]): Kanban[];
            join(separator?: string): string;
            reverse(): Kanban[];
            shift(): Kanban;
            slice(start?: number, end?: number): Kanban[];
            sort(compareFn?: (a: Kanban, b: Kanban) => number): Kanban[];
            splice(start: number, deleteCount?: number): Kanban[];
            splice(start: number, deleteCount: number, ...items: Kanban[]): Kanban[];
            unshift(...items: Kanban[]): number;
            indexOf(searchElement: Kanban, fromIndex?: number): number;
            lastIndexOf(searchElement: Kanban, fromIndex?: number): number;
            every<S extends Kanban>(predicate: (value: Kanban, index: number, array: Kanban[]) => value is S, thisArg?: any): this is S[];
            every(predicate: (value: Kanban, index: number, array: Kanban[]) => unknown, thisArg?: any): boolean;
            some(predicate: (value: Kanban, index: number, array: Kanban[]) => unknown, thisArg?: any): boolean;
            forEach(callbackfn: (value: Kanban, index: number, array: Kanban[]) => void, thisArg?: any): void;
            map<U>(callbackfn: (value: Kanban, index: number, array: Kanban[]) => U, thisArg?: any): U[];
            filter<S_1 extends Kanban>(predicate: (value: Kanban, index: number, array: Kanban[]) => value is S_1, thisArg?: any): S_1[];
            filter(predicate: (value: Kanban, index: number, array: Kanban[]) => unknown, thisArg?: any): Kanban[];
            reduce(callbackfn: (previousValue: Kanban, currentValue: Kanban, currentIndex: number, array: Kanban[]) => Kanban): Kanban;
            reduce(callbackfn: (previousValue: Kanban, currentValue: Kanban, currentIndex: number, array: Kanban[]) => Kanban, initialValue: Kanban): Kanban;
            reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: Kanban, currentIndex: number, array: Kanban[]) => U_1, initialValue: U_1): U_1;
            reduceRight(callbackfn: (previousValue: Kanban, currentValue: Kanban, currentIndex: number, array: Kanban[]) => Kanban): Kanban;
            reduceRight(callbackfn: (previousValue: Kanban, currentValue: Kanban, currentIndex: number, array: Kanban[]) => Kanban, initialValue: Kanban): Kanban;
            reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: Kanban, currentIndex: number, array: Kanban[]) => U_2, initialValue: U_2): U_2;
            find<S_2 extends Kanban>(predicate: (this: void, value: Kanban, index: number, obj: Kanban[]) => value is S_2, thisArg?: any): S_2;
            find(predicate: (value: Kanban, index: number, obj: Kanban[]) => unknown, thisArg?: any): Kanban;
            findIndex(predicate: (value: Kanban, index: number, obj: Kanban[]) => unknown, thisArg?: any): number;
            fill(value: Kanban, start?: number, end?: number): Kanban[];
            copyWithin(target: number, start: number, end?: number): Kanban[];
            entries(): IterableIterator<[number, Kanban]>;
            keys(): IterableIterator<number>;
            values(): IterableIterator<Kanban>;
            includes(searchElement: Kanban, fromIndex?: number): boolean;
            flatMap<U_3, This = undefined>(callback: (this: This, value: Kanban, index: number, array: Kanban[]) => U_3 | readonly U_3[], thisArg?: This): U_3[];
            flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
            [Symbol.iterator](): IterableIterator<Kanban>;
            [Symbol.unscopables](): {
                copyWithin: boolean;
                entries: boolean;
                fill: boolean;
                find: boolean;
                findIndex: boolean;
                keys: boolean;
                values: boolean;
            };
            at(index: number): Kanban;
        };
    }>;
    findBy(options: FindOptions, transaction: any): Promise<Kanban[]>;
    findOne(options: FindOptions, transaction: any): Promise<Kanban>;
    delete(id: number, userId: number, transaction: any): Promise<string | number>;
}
